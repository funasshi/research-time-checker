{"version":3,"sources":["Timekeep.js","App.js","reportWebVitals.js","index.js"],"names":["Timekeep","props","state","count","mode","seconds","minutes","hours","doAction","bind","countup","this","setState","count2times","Math","floor","testTimer","setInterval","clearInterval","onClick","Component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kRA2DeA,E,kDAxDX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTC,MAAM,EACNC,KAAK,OACLC,QAAQ,EACRC,QAAQ,EACRC,MAAM,GAEV,EAAKC,SAAS,EAAKA,SAASC,KAAd,gBACd,EAAKC,QAAQ,EAAKA,QAAQD,KAAb,gBAVC,E,sDAedE,KAAKC,SAAS,CACVT,MAAOQ,KAAKT,MAAMC,MAAQ,IAE9BQ,KAAKE,gB,oCAILF,KAAKC,SAAS,CACVP,QAAQM,KAAKT,MAAMC,MAAM,GACzBG,QAASQ,KAAKC,MAAMJ,KAAKT,MAAMC,MAAM,IAAI,GACzCI,MAAOO,KAAKC,MAAMJ,KAAKT,MAAMC,MAAM,U,iCAKjB,SAAlBQ,KAAKT,MAAME,MACXO,KAAKK,UAAUC,YAAYN,KAAKD,QAAQ,KACxCC,KAAKC,SAAS,CACVT,MAAMQ,KAAKT,MAAMC,MACjBC,KAAK,YAGc,IAAnBO,KAAKT,MAAMC,OACfe,cAAcP,KAAKK,WAEnBL,KAAKC,SAAS,CACVR,KAAK,Y,+BAMb,OAAQ,gCACJ,8BAAIO,KAAKT,MAAMK,MAAf,IAAuBI,KAAKT,MAAMI,QAAlC,IAA4CK,KAAKT,MAAMG,WACvD,wBAAQc,QAASR,KAAKH,SAAtB,SAAmD,SAAlBG,KAAKT,MAAME,KAAgB,gBAAQ,wB,GAlDzDgB,aCSRC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3712ef66.chunk.js","sourcesContent":["import React, { Component} from 'react';\n\nclass Timekeep extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            count:0,\n            mode:\"stop\",\n            seconds:0,\n            minutes:0,\n            hours:0\n        }\n        this.doAction=this.doAction.bind(this)\n        this.countup=this.countup.bind(this)\n\n    }\n\n    countup() {\n        this.setState({ \n            count: this.state.count + 1 \n        });\n        this.count2times()\n        }\n    \n    count2times(){\n        this.setState({\n            seconds:this.state.count%60,\n            minutes:(Math.floor(this.state.count/60)%60),\n            hours:(Math.floor(this.state.count/3600)),\n        })\n    }\n\n    doAction(){\n        if (this.state.mode===\"stop\"){\n            this.testTimer=setInterval(this.countup,1000); //1秒毎にcountup()を呼び出し\n            this.setState({\n                count:this.state.count,\n                mode:\"start\",\n            })\n        } else {\n            if (this.state.count!==0){\n            clearInterval(this.testTimer);\n            }\n            this.setState({\n                mode:\"stop\",\n            })\n        }\n    }\n\n    render(){\n        return (<div>\n            <p>{this.state.hours}:{this.state.minutes}:{this.state.seconds}</p>\n            <button onClick={this.doAction}>{this.state.mode===\"stop\" ? \"開始!\" : \"停止\" }</button>\n        </div>\n\n        );\n    }\n}\n\nexport default Timekeep;","import './App.css';\nimport Timekeep from \"./Timekeep\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Timekeep/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}